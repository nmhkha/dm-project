import streamlit as st
import pandas as pd
from utils.visualizer import Visualizer

st.set_page_config(page_title="T·ªïng Quan D·ªØ Li·ªáu", page_icon="üìä", layout="wide")

def main():
    st.title("üìä T·ªïng Quan D·ªØ Li·ªáu & Ph√¢n T√≠ch Kh√°m Ph√°")
    
    visualizer = Visualizer()
    
    # Data selection
    data_options = []
    if st.session_state.original_data is not None:
        data_options.append("D·ªØ Li·ªáu G·ªëc")
    if st.session_state.dirty_data is not None:
        data_options.append("D·ªØ Li·ªáu B·∫©n")
    if st.session_state.cleaned_data is not None:
        data_options.append("D·ªØ Li·ªáu ƒê√£ L√†m S·∫°ch")
    
    if not data_options:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu. Vui l√≤ng t·∫£i d·ªØ li·ªáu tr∆∞·ªõc.")
        st.stop()
    
    selected_data = st.selectbox("Ch·ªçn b·ªô d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch:", data_options)
    
    # Get the selected dataset
    if selected_data == "D·ªØ Li·ªáu G·ªëc":
        df = st.session_state.original_data
    elif selected_data == "D·ªØ Li·ªáu B·∫©n":
        df = st.session_state.dirty_data
    else:
        df = st.session_state.cleaned_data
    
    if df is None:
        st.error("D·ªØ li·ªáu ƒë∆∞·ª£c ch·ªçn kh√¥ng kh·∫£ d·ª•ng.")
        st.stop()
    
    # Data overview
    st.subheader("üìà T√≥m T·∫Øt B·ªô D·ªØ Li·ªáu")
    
    overview = st.session_state.data_processor.get_data_overview(df)
    
    # Basic metrics
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("T·ªïng S·ªë D√≤ng", overview['shape'][0])
    with col2:
        st.metric("T·ªïng S·ªë C·ªôt", overview['shape'][1])
    with col3:
        st.metric("Gi√° Tr·ªã Thi·∫øu", sum(overview['missing_values'].values()))
    with col4:
        st.metric("S·ª≠ D·ª•ng B·ªô Nh·ªõ", f"{overview['memory_usage']:.2f} MB")
    
    # Data quality score
    quality_scores = st.session_state.data_processor.get_data_quality_score(df)
    
    st.subheader("üéØ ƒêi·ªÉm Ch·∫•t L∆∞·ª£ng D·ªØ Li·ªáu")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Gi√° Tr·ªã Thi·∫øu", f"{quality_scores['missing_values']:.1f}/100")
    with col2:
        st.metric("D·ªØ Li·ªáu Tr√πng L·∫∑p", f"{quality_scores['duplicates']:.1f}/100")
    with col3:
        st.metric("Gi√° Tr·ªã Ngo·∫°i Lai", f"{quality_scores['outliers']:.1f}/100")
    with col4:
        st.metric("ƒêi·ªÉm T·ªïng Th·ªÉ", f"{quality_scores['overall']:.1f}/100")
    
    # Column information
    st.subheader("üìã Th√¥ng Tin C·ªôt")
    
    col_info = pd.DataFrame({
        'C·ªôt': overview['columns'],
        'Ki·ªÉu D·ªØ Li·ªáu': [overview['dtypes'][col] for col in overview['columns']],
        'S·ªë Thi·∫øu': [overview['missing_values'][col] for col in overview['columns']],
        'T·ªâ L·ªá Thi·∫øu %': [f"{overview['missing_percentage'][col]:.1f}%" for col in overview['columns']]
    })
    
    st.dataframe(col_info, use_container_width=True)
    
    # Data preview
    st.subheader("üëÄ Xem Tr∆∞·ªõc D·ªØ Li·ªáu")
    
    preview_options = st.radio(
        "Ch·ªçn lo·∫°i xem tr∆∞·ªõc:",
        ["10 d√≤ng ƒë·∫ßu", "10 d√≤ng cu·ªëi", "10 d√≤ng ng·∫´u nhi√™n", "M·∫´u c√≥ gi√° tr·ªã thi·∫øu"],
        horizontal=True
    )
    
    if preview_options == "10 d√≤ng ƒë·∫ßu":
        st.dataframe(df.head(10), use_container_width=True)
    elif preview_options == "10 d√≤ng cu·ªëi":
        st.dataframe(df.tail(10), use_container_width=True)
    elif preview_options == "10 d√≤ng ng·∫´u nhi√™n":
        st.dataframe(df.sample(min(10, len(df))), use_container_width=True)
    else:
        # Show rows with missing values
        missing_rows = df[df.isnull().any(axis=1)]
        if len(missing_rows) > 0:
            st.dataframe(missing_rows.head(10), use_container_width=True)
        else:
            st.info("Kh√¥ng t√¨m th·∫•y d√≤ng n√†o c√≥ gi√° tr·ªã thi·∫øu.")
    
    # Visualizations
    st.subheader("üìä Tr·ª±c Quan H√≥a D·ªØ Li·ªáu")
    
    # Create tabs for different visualizations
    tab1, tab2, tab3, tab4 = st.tabs(["Gi√° Tr·ªã Thi·∫øu", "Ph√¢n Ph·ªëi", "T∆∞∆°ng Quan", "Ph√¢n Lo·∫°i"])
    
    with tab1:
        if df.isnull().sum().sum() > 0:
            col1, col2 = st.columns(2)
            
            with col1:
                st.plotly_chart(
                    visualizer.plot_missing_values_summary(df),
                    use_container_width=True
                )
            
            with col2:
                st.plotly_chart(
                    visualizer.plot_missing_values_heatmap(df),
                    use_container_width=True
                )
        else:
            st.success("üéâ Kh√¥ng ph√°t hi·ªán gi√° tr·ªã thi·∫øu n√†o trong b·ªô d·ªØ li·ªáu n√†y!")
    
    with tab2:
        numeric_cols = overview['numeric_columns']
        if numeric_cols:
            selected_cols = st.multiselect(
                "Ch·ªçn c√°c c·ªôt ƒë·ªÉ tr·ª±c quan h√≥a:",
                numeric_cols,
                default=numeric_cols[:3]
            )
            
            if selected_cols:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.plotly_chart(
                        visualizer.plot_data_distribution(df, selected_cols),
                        use_container_width=True
                    )
                
                with col2:
                    st.plotly_chart(
                        visualizer.plot_outliers_boxplot(df, selected_cols),
                        use_container_width=True
                    )
        else:
            st.info("Kh√¥ng c√≥ c·ªôt s·ªë n√†o ƒë·ªÉ ph√¢n t√≠ch ph√¢n ph·ªëi.")
    
    with tab3:
        if len(overview['numeric_columns']) > 1:
            correlation_plot = visualizer.plot_correlation_heatmap(df)
            if correlation_plot:
                st.plotly_chart(correlation_plot, use_container_width=True)
            
            # Show correlation table
            corr_matrix = df[overview['numeric_columns']].corr()
            st.subheader("Ma Tr·∫≠n T∆∞∆°ng Quan")
            st.dataframe(corr_matrix, use_container_width=True)
        else:
            st.info("C·∫ßn √≠t nh·∫•t 2 c·ªôt s·ªë ƒë·ªÉ ph√¢n t√≠ch t∆∞∆°ng quan.")
    
    with tab4:
        categorical_cols = overview['categorical_columns']
        if categorical_cols:
            selected_cat_cols = st.multiselect(
                "Ch·ªçn c√°c c·ªôt ph√¢n lo·∫°i ƒë·ªÉ tr·ª±c quan h√≥a:",
                categorical_cols,
                default=categorical_cols[:2]
            )
            
            if selected_cat_cols:
                st.plotly_chart(
                    visualizer.plot_categorical_distribution(df, selected_cat_cols),
                    use_container_width=True
                )
                
                # Show value counts
                for col in selected_cat_cols:
                    with st.expander(f"S·ªë l∆∞·ª£ng gi√° tr·ªã cho {col}"):
                        value_counts = df[col].value_counts()
                        st.dataframe(value_counts.reset_index())
        else:
            st.info("Kh√¥ng c√≥ c·ªôt ph√¢n lo·∫°i n√†o ƒë·ªÉ ph√¢n t√≠ch.")
    
    # Descriptive statistics
    st.subheader("üìà Th·ªëng K√™ M√¥ T·∫£")
    
    stat_tabs = st.tabs(["S·ªë", "Ph√¢n Lo·∫°i"])
    
    with stat_tabs[0]:
        if overview['numeric_columns']:
            st.dataframe(df[overview['numeric_columns']].describe(), use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ c·ªôt s·ªë n√†o.")
    
    with stat_tabs[1]:
        if overview['categorical_columns']:
            cat_stats = df[overview['categorical_columns']].describe(include='all')
            st.dataframe(cat_stats, use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ c·ªôt ph√¢n lo·∫°i n√†o.")
    
    # Outlier detection
    if overview['numeric_columns']:
        st.subheader("üîç Ph√°t Hi·ªán Gi√° Tr·ªã Ngo·∫°i Lai")
        
        outlier_method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p ph√°t hi·ªán ngo·∫°i lai:", ["IQR", "Z-Score"])
        outliers = st.session_state.data_processor.detect_outliers(
            df, method=outlier_method.lower()
        )
        
        outlier_df = pd.DataFrame([
            {
                'C·ªôt': col,
                'S·ªë Ngo·∫°i Lai': info['count'],
                'T·ªâ L·ªá Ngo·∫°i Lai': f"{info['percentage']:.2f}%"
            }
            for col, info in outliers.items()
        ])
        
        st.dataframe(outlier_df, use_container_width=True)

if __name__ == "__main__":
    main()
